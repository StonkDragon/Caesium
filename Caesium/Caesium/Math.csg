@Ifdef __cplusplus
extern "C" {
@Endif

@Ifndef _caesium_math_h_
@Define _caesium_math_h_

@Include <math.h>

fn cmSin(f32 x) : f32 {
    return sinf(x);
}

fn cmCos(f32 x) : f32 {
    return cosf(x);
}

fn cmTan(f32 x) : f32 {
    return tanf(x);
}

fn cmASin(f32 x) : f32 {
    return asinf(x);
}

fn cmACos(f32 x) : f32 {
    return acosf(x);
}

fn cmATan(f32 x) : f32 {
    return atanf(x);
}

fn cmATan2(f32 y, f32 x) : f32 {
    return atan2f(y, x);
}

fn cmSqrt(f32 x) : f32 {
    return sqrtf(x);
}

fn cmInverseSqrt(f32 x) : f32 {
    return 1.0f / sqrtf(x);
}

fn cmCeil(f32 x) : f32 {
    return ceilf(x);
}

fn cmFloor(f32 x) : f32 {
    return floorf(x);
}

fn cmAbs(f32 x) : f32 {
    return fabsf(x);
}

fn cmMin(f32 x, f32 y) : f32 {
    return fminf(x, y);
}

fn cmMax(f32 x, f32 y) : f32 {
    return fmaxf(x, y);
}

fn cmLerp(f32 x, f32 y, f32 t) : f32 {
    return x + (y - x) * t;
}

fn cmClamp(f32 x, f32 min, f32 max) : f32 {
    return fmaxf(min, fminf(x, max));
}

fn cmSign(f32 x) : f32 {
    return x < 0.0f ? -1.0f : 1.0f;
}

fn cmMod(f32 x, f32 y) : f32 {
    return fmodf(x, y);
}

fn cmRadians(f32 x) : f32 {
    return x * 0.0174532925f;
}

fn cmDegrees(f32 x) : f32 {
    return x * 57.2957795f;
}

fn cmSinh(f32 x) : f32 {
    return sinhf(x);
}

fn cmCosh(f32 x) : f32 {
    return coshf(x);
}

fn cmTanh(f32 x) : f32 {
    return tanhf(x);
}

fn cmASinh(f32 x) : f32 {
    return asinhf(x);
}

fn cmACosh(f32 x) : f32 {
    return acoshf(x);
}

fn cmATanh(f32 x) : f32 {
    return atanhf(x);
}

fn cmExp(f32 x) : f32 {
    return expf(x);
}

fn cmLog(f32 x) : f32 {
    return logf(x);
}

fn cmLog2(f32 x) : f32 {
    return logf(x) / 0.6931471805f;
}

fn cmLog10(f32 x) : f32 {
    return logf(x) / 2.302585093f;
}

fn cmPow(f32 x, f32 y) : f32 {
    return powf(x, y);
}

fn cmExp2(f32 x) : f32 {
    return exp2f(x);
}

fn cmSmoothStep(f32 x) : f32 {
    return x * x * (3.0f - 2.0f * x);
}

fn cmSmoothMin(f32 a, f32 b, f32 k) : f32 {
    f32 res = exp(-k * a) + exp(-k * b);
    return -log(res) / k;
}

fn cmInverseSqrtF(f32 x) : f32 {
    f32 xhalf = 0.5f * x;
    i32 i = * (i32*) &x;
    i = 0x5f3759df - (i >> 1);
    x = * (f32*) &i;
    x = x * (1.5f - xhalf * x * x);
    x = x * (1.5f - xhalf * x * x);
    return x;
}

@Endif

@Ifdef __cplusplus
}
@Endif
